#!/bin/bash

clear

# printf "format string", var1, var2

# 与C语言一样

# gawk 将每个格式化说明符用作命令中列出的每个变量的占位符
# 第一个格式化说明符匹配第一个变量；第二个格式化说明符匹配第二个变量，以此类推

gawk 'BEGIN{
 x = 100 * 100
 printf "%e\n", x
}'



# 格式化说明控制字符
# c : 将数据显示为ASCII字符
# g ： 已科学计数法和浮点数的较短者显示数字
# d ： 显示整数值
# o ： 显示八进制数值
# i ： 显示整数值（与d相同）
# s ： 显示文本字符串
# e ： 用科学计数法显示数字
# x ： 显示十六进制数
# f :  显示浮点数值
# X ： 显示十六进制，但是从A-F 显示大写

# width ： 指定输出字段最小宽度的数字值；如果输出较短 printf用空格补全，文本右对齐。如果超过指定宽度，使用该值覆盖宽度
# prec ：指定浮点数中十进制小数点右侧位数的数值，或者文本字符串显示的最大字符数
# -(减号) ： 表示将数据显示在格式空间时使用左对齐

echo

gawk 'BEGIN{FS=","} {
 printf "%s, %e\n", $1, $4
}' data


# 必须手动在 gawk 后面添加换行
# 如果不强制换行，则printf 将继续在同一行打印其他内容


# 可以利用这种特性将内容打印在同一行
gawk 'BEGIN{FS=","} {printf "%s", $i} END{printf "\n"}' data



echo ++++++++++++++++++++++++++++++++


# - 右对齐
gawk 'BEGIN{FS="\n"; RS=""} {printf "%-6s %s\n", $1, $5}' data





























